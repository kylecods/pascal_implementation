package lib.backend;

import lib.intermediate.ICode;
import lib.intermediate.SymTab;
import lib.intermediate.SymTabStack;
import lib.message.*;


public abstract class Backend implements MessageProducer {

    protected static MessageHandler messageHandler;

    static {
        messageHandler = new MessageHandler();
    }
    protected SymTabStack symTabStack;
    protected ICode iCode;


    /**
     * Process the intermediate code and the symbol table generated by the
     * parser. To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code
     * @param symTabStack the symbol table
     * @throws Exception if an error occurred
     * * */
    public abstract void process(ICode iCode, SymTabStack symTabStack) throws Exception;

    @Override
    public void addMessageListener(MessageListener listener) {
        messageHandler.addListener(listener);
    }

    @Override
    public void removeMessageListener(MessageListener listener) {
        messageHandler.removeListener(listener);
    }

    @Override
    public void sendMessage(Message message) {
        messageHandler.sendMessage(message);
    }
}
